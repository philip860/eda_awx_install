#Here we will check the current Acme accounts in the System
- name: List ACME accounts
  register: acct_list
  ansible.builtin.uri:
    url: "https://cert-manager.com/api/acme/v2/account?name={{ ansible_nodename }}&organizationId=4101"
    headers:
      customerUri: "{{ customerURI }}"
      login: "{{ sectigo_user }}"
      password: "{{ sectigo_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 201, 200

- name: Set account location and add domain when the account already exists
  block:
    - name: Set account location
      ansible.builtin.set_fact:
        v2_acme_account_location: "https://cert-manager.com/api/acme/v2/account/{{ item.id }}"
        v1_acme_account_location: "https://cert-manager.com/api/acme/v1/account/{{ item.id }}"
      when: item.name == ansible_nodename
      loop: "{{ acct_list.json }}"
  when: acct_list.json | length > 0

- name: Create ACME account and register location
  block:
    - name: Create new ACME account
      register: create_account
      ansible.builtin.uri:
        url: "https://cert-manager.com/api/acme/v2/account"
        headers:
          customerUri: "{{ customerURI }}"
          login: "{{ sectigo_user }}"
          password: "{{ sectigo_password }}"
        method: POST
        force_basic_auth: yes
        status_code: 201, 200
        body_format: json
        body: |
          {
            "name": "{{ ansible_nodename }}",
            "acmeServer": "https://acme.sectigo.com/v2/InCommonRSAOV",
            "organizationId": 4101,
            "evDetails": {
              "orgName": "University of Connecticut",
              "orgCountry": "US",
              "orgAddress1": "25 Gampel Service Dr",
              "orgLocality": "Storrs",
              "orgStateOrProvince": "Connecticut",
              "orgPostalCode": "06269"
              }
          }

- name: Set account location
  ansible.builtin.set_fact:
    v2_acme_account_location: "{{ create_account.location }}"
    v1_acme_account_location: "{{ create_account.location | replace('v2','v1')}}"

- name: Assign domain to ACME account
  register: account_account
  ansible.builtin.uri:
    url: "{{ v1_acme_account_location }}/domains"
    headers:
      customerUri: "{{ customerURI }}"
      login: "{{ sectigo_user }}"
      password: "{{ sectigo_password }}"
    method: POST
    force_basic_auth: yes
    status_code: 201, 200
    body_format: json
    body: |
      {
        "domains":[
          {"name":"{{ acme_domain }}"}
        ]
      }
  when: acct_list.json | length == 0

- name: Get ACME account details
  register: account_details
  ansible.builtin.uri:
    url: "{{ v2_acme_account_location }}"
    headers:
      customerUri: "{{ customerURI }}"
      login: "{{ sectigo_user }}"
      password: "{{ sectigo_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 201, 200
- name: Set variables for certbot
  ansible.builtin.set_fact:
    acme_eab_kid: "{{ account_details.json.macId }}"
    acme_eab_hmac_key: "{{ account_details.json.macKey }}"
  # tasks file for certbot
- name: Enable EPEL Repository on RHEL 7
  ansible.builtin.yum:
    name: epel-release
    state: present
  become: True
  when: ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution_major_version'] == '7'

- name: Enable EPEL Repository on RHEL 8
  ansible.builtin.dnf:
    name: epel-release
    state: present
  become: True
  when: ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution_major_version'] == '8'

- name: Ensure snapd is installed.
  ansible.builtin.yum:
    name:
      - snapd
      - fuse
      - squashfs-tools
      - squashfuse
      - kernel-modules
    state: present
  register: snapd_install

- name: Ensure snapd is enabled.
  ansible.builtin.systemd:
    name: snapd.socket
    enabled: true
    state: started

- name: Enable classic snap support.
  ansible.builtin.file:
    src: /var/lib/snapd/snap
    dest: /snap
    state: link
  when: ansible_facts['os_family'] == "RedHat"

- name: load squashfs module
  community.general.modprobe:
    name: "squashfs"
    state: present

- name: Update snap after install.
  ansible.builtin.shell: snap install core; snap refresh core
  changed_when: true
  failed_when: false
  when: snapd_install is changed

- name: Install certbot via snap.
  community.general.snap:
    name: certbot
    classic: true
    channel: latest

- name: Symlink certbot into place.
  ansible.builtin.file:
    src: /snap/bin/certbot
    dest: /usr/bin/certbot
    state: link
  ignore_errors: "{{ ansible_check_mode }}"

- name: Set Certbot script variable.
  ansible.builtin.set_fact:
    certbot_script: /usr/bin/certbot

- name: Set LetsEncrypt Cronjob for Certficate Auto Renewal
  ansible.builtin.cron:
    name: Certbot automatic renewal.
    minute: 30
    hour: 3
    job: "/usr/bin/certbot renew"
  when: ansible_facts['os_family'] == "RedHat"


- name: Waiting 30 Seconds For Certbot to Generate Certs
  ansible.builtin.shell:  /bin/sleep 30
  args:
    executable: /bin/bash

- name: Rerun  Create and Install Cert
  ansible.builtin.command: "certbot certonly --standalone --non-interactive --agree-tos --email techsupport@uconn.edu --server https://acme.sectigo.com/v2/InCommonRSAOV --eab-kid {{ acme_eab_kid }} --eab-hmac-key {{ acme_eab_hmac_key }} --domain '{{ ansible_nodename }}' --domain 'awx.uconn.edu' --domain '*.awx.uconn.edu'  --cert-name {{ ansible_nodename }} --force-renewal"
  ignore_errors: yes
